/* tslint:disable */
/* eslint-disable */
/**
 * REST API SPEC FOR MOVESONG FRONTEND
 * REST API SPEC FOR MOVESONG FRONTEND
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateShareReq } from '../models';
import { CreateShareResp } from '../models';
import { DeleteSharesReq } from '../models';
import { DeleteSharesResp } from '../models';
import { GetShareByIdReq } from '../models';
import { GetShareByIdResp } from '../models';
import { GetSharesByMovesongEmailReq } from '../models';
import { GetSharesByMovesongEmailResp } from '../models';
import { UpdateShareReq } from '../models';
import { UpdateShareResp } from '../models';
/**
 * ShareApi - axios parameter creator
 * @export
 */
export const ShareApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a share
         * @param {CreateShareReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShare: async (body?: CreateShareReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createShare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a share
         * @param {DeleteSharesReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShares: async (body?: DeleteSharesReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteShares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a share by the id
         * @param {GetShareByIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareById: async (body?: GetShareByIdReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getShareById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all shares by the movesong email
         * @param {GetSharesByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharesByMovesongEmail: async (body?: GetSharesByMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getSharesByMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a share
         * @param {UpdateShareReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShare: async (body?: UpdateShareReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/updateShare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShareApi - functional programming interface
 * @export
 */
export const ShareApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a share
         * @param {CreateShareReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShare(body?: CreateShareReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateShareResp>>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).createShare(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a share
         * @param {DeleteSharesReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShares(body?: DeleteSharesReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteSharesResp>>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).deleteShares(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a share by the id
         * @param {GetShareByIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShareById(body?: GetShareByIdReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetShareByIdResp>>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).getShareById(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all shares by the movesong email
         * @param {GetSharesByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharesByMovesongEmail(body?: GetSharesByMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetSharesByMovesongEmailResp>>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).getSharesByMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a share
         * @param {UpdateShareReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShare(body?: UpdateShareReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateShareResp>>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).updateShare(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ShareApi - factory interface
 * @export
 */
export const ShareApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a share
         * @param {CreateShareReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShare(body?: CreateShareReq, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateShareResp>> {
            return ShareApiFp(configuration).createShare(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a share
         * @param {DeleteSharesReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShares(body?: DeleteSharesReq, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteSharesResp>> {
            return ShareApiFp(configuration).deleteShares(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a share by the id
         * @param {GetShareByIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShareById(body?: GetShareByIdReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetShareByIdResp>> {
            return ShareApiFp(configuration).getShareById(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all shares by the movesong email
         * @param {GetSharesByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharesByMovesongEmail(body?: GetSharesByMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSharesByMovesongEmailResp>> {
            return ShareApiFp(configuration).getSharesByMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a share
         * @param {UpdateShareReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShare(body?: UpdateShareReq, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateShareResp>> {
            return ShareApiFp(configuration).updateShare(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShareApi - object-oriented interface
 * @export
 * @class ShareApi
 * @extends {BaseAPI}
 */
export class ShareApi extends BaseAPI {
    /**
     * 
     * @summary Create a share
     * @param {CreateShareReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public async createShare(body?: CreateShareReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateShareResp>> {
        return ShareApiFp(this.configuration).createShare(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a share
     * @param {DeleteSharesReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public async deleteShares(body?: DeleteSharesReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteSharesResp>> {
        return ShareApiFp(this.configuration).deleteShares(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a share by the id
     * @param {GetShareByIdReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public async getShareById(body?: GetShareByIdReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetShareByIdResp>> {
        return ShareApiFp(this.configuration).getShareById(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all shares by the movesong email
     * @param {GetSharesByMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public async getSharesByMovesongEmail(body?: GetSharesByMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetSharesByMovesongEmailResp>> {
        return ShareApiFp(this.configuration).getSharesByMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a share
     * @param {UpdateShareReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public async updateShare(body?: UpdateShareReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateShareResp>> {
        return ShareApiFp(this.configuration).updateShare(body, options).then((request) => request(this.axios, this.basePath));
    }
}
