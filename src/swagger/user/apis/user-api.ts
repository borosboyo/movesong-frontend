/* tslint:disable */
/* eslint-disable */
/**
 * REST API SPEC FOR MOVESONG FRONTEND
 * REST API SPEC FOR MOVESONG FRONTEND
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CheckForgotPasswordTokenReq } from '../models';
import { CheckForgotPasswordTokenResp } from '../models';
import { ContactReq } from '../models';
import { ContactResp } from '../models';
import { DeleteReq } from '../models';
import { DeleteResp } from '../models';
import { EnableReq } from '../models';
import { EnableResp } from '../models';
import { FindUserIdByEmailReq } from '../models';
import { FindUserIdByEmailResp } from '../models';
import { ForgotPasswordReq } from '../models';
import { ForgotPasswordResp } from '../models';
import { LoginReq } from '../models';
import { LoginResp } from '../models';
import { RegisterReq } from '../models';
import { RegisterResp } from '../models';
import { ResendEnableReq } from '../models';
import { ResendEnableResp } from '../models';
import { SaveForgotPasswordReq } from '../models';
import { SaveForgotPasswordResp } from '../models';
import { UpdatePasswordReq } from '../models';
import { UpdatePasswordResp } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the user
         * @param {DeleteReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (body?: DeleteReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check the forgot password token of the user
         * @param {CheckForgotPasswordTokenReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkForgotPasswordToken: async (body?: CheckForgotPasswordTokenReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkForgotPasswordToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Contact request from the user
         * @param {ContactReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contact: async (body?: ContactReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable the user
         * @param {EnableReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enable: async (body?: EnableReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find the user id by email
         * @param {FindUserIdByEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserIdByEmail: async (body?: FindUserIdByEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/findUserIdByEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot the password of the user
         * @param {ForgotPasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (body?: ForgotPasswordReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/forgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login the user
         * @param {LoginReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (body?: LoginReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a user
         * @param {RegisterReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (body?: RegisterReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend the enable email to the user
         * @param {ResendEnableReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEnable: async (body?: ResendEnableReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resendEnable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the forgot password of the user
         * @param {SaveForgotPasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveForgotPassword: async (body?: SaveForgotPasswordReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/saveForgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the password of the user
         * @param {UpdatePasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (body?: UpdatePasswordReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/updatePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the user
         * @param {DeleteReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(body?: DeleteReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration)._delete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check the forgot password token of the user
         * @param {CheckForgotPasswordTokenReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkForgotPasswordToken(body?: CheckForgotPasswordTokenReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CheckForgotPasswordTokenResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).checkForgotPasswordToken(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Contact request from the user
         * @param {ContactReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contact(body?: ContactReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).contact(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Enable the user
         * @param {EnableReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enable(body?: EnableReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EnableResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).enable(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Find the user id by email
         * @param {FindUserIdByEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUserIdByEmail(body?: FindUserIdByEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FindUserIdByEmailResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).findUserIdByEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Forgot the password of the user
         * @param {ForgotPasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(body?: ForgotPasswordReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ForgotPasswordResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).forgotPassword(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login the user
         * @param {LoginReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(body?: LoginReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoginResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).login(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register a user
         * @param {RegisterReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(body?: RegisterReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RegisterResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).register(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Resend the enable email to the user
         * @param {ResendEnableReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendEnable(body?: ResendEnableReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResendEnableResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).resendEnable(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the forgot password of the user
         * @param {SaveForgotPasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveForgotPassword(body?: SaveForgotPasswordReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SaveForgotPasswordResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).saveForgotPassword(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update the password of the user
         * @param {UpdatePasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(body?: UpdatePasswordReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdatePasswordResp>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).updatePassword(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete the user
         * @param {DeleteReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(body?: DeleteReq, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteResp>> {
            return UserApiFp(configuration)._delete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check the forgot password token of the user
         * @param {CheckForgotPasswordTokenReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkForgotPasswordToken(body?: CheckForgotPasswordTokenReq, options?: AxiosRequestConfig): Promise<AxiosResponse<CheckForgotPasswordTokenResp>> {
            return UserApiFp(configuration).checkForgotPasswordToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Contact request from the user
         * @param {ContactReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contact(body?: ContactReq, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactResp>> {
            return UserApiFp(configuration).contact(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable the user
         * @param {EnableReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enable(body?: EnableReq, options?: AxiosRequestConfig): Promise<AxiosResponse<EnableResp>> {
            return UserApiFp(configuration).enable(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find the user id by email
         * @param {FindUserIdByEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUserIdByEmail(body?: FindUserIdByEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<FindUserIdByEmailResp>> {
            return UserApiFp(configuration).findUserIdByEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forgot the password of the user
         * @param {ForgotPasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(body?: ForgotPasswordReq, options?: AxiosRequestConfig): Promise<AxiosResponse<ForgotPasswordResp>> {
            return UserApiFp(configuration).forgotPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login the user
         * @param {LoginReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(body?: LoginReq, options?: AxiosRequestConfig): Promise<AxiosResponse<LoginResp>> {
            return UserApiFp(configuration).login(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a user
         * @param {RegisterReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(body?: RegisterReq, options?: AxiosRequestConfig): Promise<AxiosResponse<RegisterResp>> {
            return UserApiFp(configuration).register(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resend the enable email to the user
         * @param {ResendEnableReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendEnable(body?: ResendEnableReq, options?: AxiosRequestConfig): Promise<AxiosResponse<ResendEnableResp>> {
            return UserApiFp(configuration).resendEnable(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save the forgot password of the user
         * @param {SaveForgotPasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveForgotPassword(body?: SaveForgotPasswordReq, options?: AxiosRequestConfig): Promise<AxiosResponse<SaveForgotPasswordResp>> {
            return UserApiFp(configuration).saveForgotPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the password of the user
         * @param {UpdatePasswordReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(body?: UpdatePasswordReq, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdatePasswordResp>> {
            return UserApiFp(configuration).updatePassword(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Delete the user
     * @param {DeleteReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async _delete(body?: DeleteReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteResp>> {
        return UserApiFp(this.configuration)._delete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Check the forgot password token of the user
     * @param {CheckForgotPasswordTokenReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async checkForgotPasswordToken(body?: CheckForgotPasswordTokenReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<CheckForgotPasswordTokenResp>> {
        return UserApiFp(this.configuration).checkForgotPasswordToken(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Contact request from the user
     * @param {ContactReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async contact(body?: ContactReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactResp>> {
        return UserApiFp(this.configuration).contact(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Enable the user
     * @param {EnableReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async enable(body?: EnableReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<EnableResp>> {
        return UserApiFp(this.configuration).enable(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Find the user id by email
     * @param {FindUserIdByEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async findUserIdByEmail(body?: FindUserIdByEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<FindUserIdByEmailResp>> {
        return UserApiFp(this.configuration).findUserIdByEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Forgot the password of the user
     * @param {ForgotPasswordReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async forgotPassword(body?: ForgotPasswordReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<ForgotPasswordResp>> {
        return UserApiFp(this.configuration).forgotPassword(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Login the user
     * @param {LoginReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async login(body?: LoginReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<LoginResp>> {
        return UserApiFp(this.configuration).login(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Register a user
     * @param {RegisterReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async register(body?: RegisterReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<RegisterResp>> {
        return UserApiFp(this.configuration).register(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Resend the enable email to the user
     * @param {ResendEnableReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async resendEnable(body?: ResendEnableReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResendEnableResp>> {
        return UserApiFp(this.configuration).resendEnable(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Save the forgot password of the user
     * @param {SaveForgotPasswordReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async saveForgotPassword(body?: SaveForgotPasswordReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<SaveForgotPasswordResp>> {
        return UserApiFp(this.configuration).saveForgotPassword(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update the password of the user
     * @param {UpdatePasswordReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async updatePassword(body?: UpdatePasswordReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdatePasswordResp>> {
        return UserApiFp(this.configuration).updatePassword(body, options).then((request) => request(this.axios, this.basePath));
    }
}
