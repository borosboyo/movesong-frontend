/* tslint:disable */
/* eslint-disable */
/**
 * REST API SPEC FOR MOVESONG FRONTEND
 * REST API SPEC FOR MOVESONG FRONTEND
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ConnectSpotifyAccountReq } from '../models';
import { ConnectSpotifyAccountResp } from '../models';
import { ConnectYoutubeAccountReq } from '../models';
import { ConnectYoutubeAccountResp } from '../models';
import { ConvertToSpotifyReq } from '../models';
import { ConvertToSpotifyResp } from '../models';
import { ConvertToYoutubeReq } from '../models';
import { ConvertToYoutubeResp } from '../models';
import { CreateSyncReq } from '../models';
import { CreateSyncResp } from '../models';
import { DeleteConnectionsByMovesongEmailReq } from '../models';
import { DeleteConnectionsByMovesongEmailResp } from '../models';
import { DeleteSyncReq } from '../models';
import { DeleteSyncResp } from '../models';
import { DeleteSyncsByMovesongEmailReq } from '../models';
import { DeleteSyncsByMovesongEmailResp } from '../models';
import { DeleteTransformsByMovesongEmailReq } from '../models';
import { DeleteTransformsByMovesongEmailResp } from '../models';
import { ExportSpotifyPlaylistToFileReq } from '../models';
import { ExportYoutubePlaylistToFileReq } from '../models';
import { FindConnectionsByMovesongEmailReq } from '../models';
import { FindConnectionsByMovesongEmailResp } from '../models';
import { GetItemsInSpotifyPlaylistReq } from '../models';
import { GetItemsInSpotifyPlaylistResp } from '../models';
import { GetItemsInYoutubePlaylistReq } from '../models';
import { GetItemsInYoutubePlaylistResp } from '../models';
import { GetSyncsByMovesongEmailReq } from '../models';
import { GetSyncsByMovesongEmailResp } from '../models';
import { GetTransformsByDestinationPlaylistIdReq } from '../models';
import { GetTransformsByDestinationPlaylistIdResp } from '../models';
import { GetTransformsByMovesongEmailReq } from '../models';
import { GetTransformsByMovesongEmailResp } from '../models';
import { GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq } from '../models';
import { GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq } from '../models';
import { GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdResp } from '../models';
import { GetTransformsByOriginPlaylistIdReq } from '../models';
import { GetTransformsByOriginPlaylistIdResp } from '../models';
import { GetUserSpotifyPlaylistByPlaylistIdReq } from '../models';
import { GetUserSpotifyPlaylistByPlaylistIdResp } from '../models';
import { GetUserSpotifyPlaylistsReq } from '../models';
import { GetUserSpotifyPlaylistsResp } from '../models';
import { GetUserYoutubePlaylistByPlaylistIdReq } from '../models';
import { GetUserYoutubePlaylistByPlaylistIdResp } from '../models';
import { GetUserYoutubePlaylistsReq } from '../models';
import { GetUserYoutubePlaylistsResp } from '../models';
import { UpdateSyncReq } from '../models';
import { UpdateSyncResp } from '../models';
/**
 * TransformApi - axios parameter creator
 * @export
 */
export const TransformApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Connect the user's spotify account
         * @param {ConnectSpotifyAccountReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectSpotifyAccount: async (body?: ConnectSpotifyAccountReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connectSpotifyAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Connect the user's youtube account
         * @param {ConnectYoutubeAccountReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectYoutubeAccount: async (body?: ConnectYoutubeAccountReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connectYoutubeAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Convert a youtube playlist to a spotify playlist
         * @param {ConvertToSpotifyReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertToSpotify: async (body?: ConvertToSpotifyReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/convertToSpotify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Convert a spotify playlist to a youtube playlist
         * @param {ConvertToYoutubeReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertToYoutube: async (body?: ConvertToYoutubeReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/convertToYoutube`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new sync object
         * @param {CreateSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSync: async (body?: CreateSyncReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createSync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all connections by the user's movesong email
         * @param {DeleteConnectionsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectionsByMovesongEmail: async (body?: DeleteConnectionsByMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteConnectionsByMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a sync object
         * @param {DeleteSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSync: async (body?: DeleteSyncReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteSync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all sync objects by the user's movesong email
         * @param {DeleteSyncsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncsByMovesongEmail: async (body?: DeleteSyncsByMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteSyncsByMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all transformations by the user's movesong email
         * @param {DeleteTransformsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransformsByMovesongEmail: async (body?: DeleteTransformsByMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteTransformsByMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export a spotify playlist to a CSV file
         * @param {ExportSpotifyPlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSpotifyPlaylistToCSV: async (body?: ExportSpotifyPlaylistToFileReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exportSpotifyPlaylistToCSV`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export a spotify playlist to a TXT file
         * @param {ExportSpotifyPlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSpotifyPlaylistToTXT: async (body?: ExportSpotifyPlaylistToFileReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exportSpotifyPlaylistToTXT`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export a youtube playlist to a CSV file
         * @param {ExportYoutubePlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportYoutubePlaylistToCSV: async (body?: ExportYoutubePlaylistToFileReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exportYoutubePlaylistToCSV`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export a youtube playlist to a TXT file
         * @param {ExportYoutubePlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportYoutubePlaylistToTXT: async (body?: ExportYoutubePlaylistToFileReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exportYoutubePlaylistToTXT`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find all connections by the user's movesong email
         * @param {FindConnectionsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findConnectionsByMovesongEmail: async (body?: FindConnectionsByMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/findConnectionsByMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all items in a spotify playlist
         * @param {GetItemsInSpotifyPlaylistReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsInSpotifyPlaylist: async (body?: GetItemsInSpotifyPlaylistReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getItemsInSpotifyPlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all items in a youtube playlist
         * @param {GetItemsInYoutubePlaylistReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsInYoutubePlaylist: async (body?: GetItemsInYoutubePlaylistReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getItemsInYoutubePlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all sync objects by the user's movesong email
         * @param {GetSyncsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncsByMovesongEmail: async (body?: GetSyncsByMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getSyncsByMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all transformations by the destination playlist id
         * @param {GetTransformsByDestinationPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransformsByDestinationPlaylistId: async (body?: GetTransformsByDestinationPlaylistIdReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getTransformsByDestinationPlaylistId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all transformations by the movesong email
         * @param {GetTransformsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransformsByMovesongEmail: async (body?: GetTransformsByMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getTransformsByMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all transformations by the origin playlist id
         * @param {GetTransformsByOriginPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransformsByOriginPlaylistId: async (body?: GetTransformsByOriginPlaylistIdReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getTransformsByOriginPlaylistId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all transformations by the origin and destination playlist id
         * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransformsByOriginPlaylistIdAndDestinationPlaylistId: async (body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getTransformsByOriginPlaylistIdAndDestinationPlaylistId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all transformations by the origin and destination playlist id and movesong email
         * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail: async (body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a playlist of the user's spotify account by playlist id
         * @param {GetUserSpotifyPlaylistByPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSpotifyPlaylistByPlaylistId: async (body?: GetUserSpotifyPlaylistByPlaylistIdReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getUserSpotifyPlaylistByPlaylistId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all playlists of the user's spotify account
         * @param {GetUserSpotifyPlaylistsReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSpotifyPlaylists: async (body?: GetUserSpotifyPlaylistsReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getUserSpotifyPlaylists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a playlist of the user's youtube account by playlist id
         * @param {GetUserYoutubePlaylistByPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserYoutubePlaylistByPlaylistId: async (body?: GetUserYoutubePlaylistByPlaylistIdReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getUserYoutubePlaylistByPlaylistId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all playlists of the user's youtube account
         * @param {GetUserYoutubePlaylistsReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserYoutubePlaylists: async (body?: GetUserYoutubePlaylistsReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getUserYoutubePlaylists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing sync object
         * @param {UpdateSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSync: async (body?: UpdateSyncReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/updateSync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransformApi - functional programming interface
 * @export
 */
export const TransformApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Connect the user's spotify account
         * @param {ConnectSpotifyAccountReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectSpotifyAccount(body?: ConnectSpotifyAccountReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ConnectSpotifyAccountResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).connectSpotifyAccount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Connect the user's youtube account
         * @param {ConnectYoutubeAccountReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectYoutubeAccount(body?: ConnectYoutubeAccountReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ConnectYoutubeAccountResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).connectYoutubeAccount(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Convert a youtube playlist to a spotify playlist
         * @param {ConvertToSpotifyReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertToSpotify(body?: ConvertToSpotifyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ConvertToSpotifyResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).convertToSpotify(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Convert a spotify playlist to a youtube playlist
         * @param {ConvertToYoutubeReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertToYoutube(body?: ConvertToYoutubeReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ConvertToYoutubeResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).convertToYoutube(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a new sync object
         * @param {CreateSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSync(body?: CreateSyncReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateSyncResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).createSync(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete all connections by the user's movesong email
         * @param {DeleteConnectionsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConnectionsByMovesongEmail(body?: DeleteConnectionsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteConnectionsByMovesongEmailResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).deleteConnectionsByMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a sync object
         * @param {DeleteSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSync(body?: DeleteSyncReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteSyncResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).deleteSync(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete all sync objects by the user's movesong email
         * @param {DeleteSyncsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncsByMovesongEmail(body?: DeleteSyncsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteSyncsByMovesongEmailResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).deleteSyncsByMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete all transformations by the user's movesong email
         * @param {DeleteTransformsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransformsByMovesongEmail(body?: DeleteTransformsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteTransformsByMovesongEmailResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).deleteTransformsByMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Export a spotify playlist to a CSV file
         * @param {ExportSpotifyPlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSpotifyPlaylistToCSV(body?: ExportSpotifyPlaylistToFileReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).exportSpotifyPlaylistToCSV(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Export a spotify playlist to a TXT file
         * @param {ExportSpotifyPlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSpotifyPlaylistToTXT(body?: ExportSpotifyPlaylistToFileReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).exportSpotifyPlaylistToTXT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Export a youtube playlist to a CSV file
         * @param {ExportYoutubePlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportYoutubePlaylistToCSV(body?: ExportYoutubePlaylistToFileReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).exportYoutubePlaylistToCSV(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Export a youtube playlist to a TXT file
         * @param {ExportYoutubePlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportYoutubePlaylistToTXT(body?: ExportYoutubePlaylistToFileReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).exportYoutubePlaylistToTXT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Find all connections by the user's movesong email
         * @param {FindConnectionsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findConnectionsByMovesongEmail(body?: FindConnectionsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FindConnectionsByMovesongEmailResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).findConnectionsByMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all items in a spotify playlist
         * @param {GetItemsInSpotifyPlaylistReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsInSpotifyPlaylist(body?: GetItemsInSpotifyPlaylistReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetItemsInSpotifyPlaylistResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getItemsInSpotifyPlaylist(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all items in a youtube playlist
         * @param {GetItemsInYoutubePlaylistReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsInYoutubePlaylist(body?: GetItemsInYoutubePlaylistReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetItemsInYoutubePlaylistResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getItemsInYoutubePlaylist(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all sync objects by the user's movesong email
         * @param {GetSyncsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncsByMovesongEmail(body?: GetSyncsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetSyncsByMovesongEmailResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getSyncsByMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all transformations by the destination playlist id
         * @param {GetTransformsByDestinationPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByDestinationPlaylistId(body?: GetTransformsByDestinationPlaylistIdReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetTransformsByDestinationPlaylistIdResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getTransformsByDestinationPlaylistId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all transformations by the movesong email
         * @param {GetTransformsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByMovesongEmail(body?: GetTransformsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetTransformsByMovesongEmailResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getTransformsByMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all transformations by the origin playlist id
         * @param {GetTransformsByOriginPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByOriginPlaylistId(body?: GetTransformsByOriginPlaylistIdReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetTransformsByOriginPlaylistIdResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getTransformsByOriginPlaylistId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all transformations by the origin and destination playlist id
         * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByOriginPlaylistIdAndDestinationPlaylistId(body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getTransformsByOriginPlaylistIdAndDestinationPlaylistId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all transformations by the origin and destination playlist id and movesong email
         * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail(body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a playlist of the user's spotify account by playlist id
         * @param {GetUserSpotifyPlaylistByPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSpotifyPlaylistByPlaylistId(body?: GetUserSpotifyPlaylistByPlaylistIdReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserSpotifyPlaylistByPlaylistIdResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getUserSpotifyPlaylistByPlaylistId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all playlists of the user's spotify account
         * @param {GetUserSpotifyPlaylistsReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSpotifyPlaylists(body?: GetUserSpotifyPlaylistsReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserSpotifyPlaylistsResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getUserSpotifyPlaylists(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a playlist of the user's youtube account by playlist id
         * @param {GetUserYoutubePlaylistByPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserYoutubePlaylistByPlaylistId(body?: GetUserYoutubePlaylistByPlaylistIdReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserYoutubePlaylistByPlaylistIdResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getUserYoutubePlaylistByPlaylistId(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all playlists of the user's youtube account
         * @param {GetUserYoutubePlaylistsReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserYoutubePlaylists(body?: GetUserYoutubePlaylistsReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserYoutubePlaylistsResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).getUserYoutubePlaylists(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an existing sync object
         * @param {UpdateSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSync(body?: UpdateSyncReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateSyncResp>>> {
            const localVarAxiosArgs = await TransformApiAxiosParamCreator(configuration).updateSync(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TransformApi - factory interface
 * @export
 */
export const TransformApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Connect the user's spotify account
         * @param {ConnectSpotifyAccountReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectSpotifyAccount(body?: ConnectSpotifyAccountReq, options?: AxiosRequestConfig): Promise<AxiosResponse<ConnectSpotifyAccountResp>> {
            return TransformApiFp(configuration).connectSpotifyAccount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Connect the user's youtube account
         * @param {ConnectYoutubeAccountReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectYoutubeAccount(body?: ConnectYoutubeAccountReq, options?: AxiosRequestConfig): Promise<AxiosResponse<ConnectYoutubeAccountResp>> {
            return TransformApiFp(configuration).connectYoutubeAccount(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Convert a youtube playlist to a spotify playlist
         * @param {ConvertToSpotifyReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertToSpotify(body?: ConvertToSpotifyReq, options?: AxiosRequestConfig): Promise<AxiosResponse<ConvertToSpotifyResp>> {
            return TransformApiFp(configuration).convertToSpotify(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Convert a spotify playlist to a youtube playlist
         * @param {ConvertToYoutubeReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertToYoutube(body?: ConvertToYoutubeReq, options?: AxiosRequestConfig): Promise<AxiosResponse<ConvertToYoutubeResp>> {
            return TransformApiFp(configuration).convertToYoutube(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new sync object
         * @param {CreateSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSync(body?: CreateSyncReq, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateSyncResp>> {
            return TransformApiFp(configuration).createSync(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all connections by the user's movesong email
         * @param {DeleteConnectionsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConnectionsByMovesongEmail(body?: DeleteConnectionsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteConnectionsByMovesongEmailResp>> {
            return TransformApiFp(configuration).deleteConnectionsByMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a sync object
         * @param {DeleteSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSync(body?: DeleteSyncReq, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteSyncResp>> {
            return TransformApiFp(configuration).deleteSync(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all sync objects by the user's movesong email
         * @param {DeleteSyncsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncsByMovesongEmail(body?: DeleteSyncsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteSyncsByMovesongEmailResp>> {
            return TransformApiFp(configuration).deleteSyncsByMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all transformations by the user's movesong email
         * @param {DeleteTransformsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransformsByMovesongEmail(body?: DeleteTransformsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteTransformsByMovesongEmailResp>> {
            return TransformApiFp(configuration).deleteTransformsByMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export a spotify playlist to a CSV file
         * @param {ExportSpotifyPlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSpotifyPlaylistToCSV(body?: ExportSpotifyPlaylistToFileReq, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return TransformApiFp(configuration).exportSpotifyPlaylistToCSV(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export a spotify playlist to a TXT file
         * @param {ExportSpotifyPlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSpotifyPlaylistToTXT(body?: ExportSpotifyPlaylistToFileReq, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return TransformApiFp(configuration).exportSpotifyPlaylistToTXT(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export a youtube playlist to a CSV file
         * @param {ExportYoutubePlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportYoutubePlaylistToCSV(body?: ExportYoutubePlaylistToFileReq, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return TransformApiFp(configuration).exportYoutubePlaylistToCSV(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export a youtube playlist to a TXT file
         * @param {ExportYoutubePlaylistToFileReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportYoutubePlaylistToTXT(body?: ExportYoutubePlaylistToFileReq, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return TransformApiFp(configuration).exportYoutubePlaylistToTXT(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find all connections by the user's movesong email
         * @param {FindConnectionsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findConnectionsByMovesongEmail(body?: FindConnectionsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<FindConnectionsByMovesongEmailResp>> {
            return TransformApiFp(configuration).findConnectionsByMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all items in a spotify playlist
         * @param {GetItemsInSpotifyPlaylistReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsInSpotifyPlaylist(body?: GetItemsInSpotifyPlaylistReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetItemsInSpotifyPlaylistResp>> {
            return TransformApiFp(configuration).getItemsInSpotifyPlaylist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all items in a youtube playlist
         * @param {GetItemsInYoutubePlaylistReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsInYoutubePlaylist(body?: GetItemsInYoutubePlaylistReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetItemsInYoutubePlaylistResp>> {
            return TransformApiFp(configuration).getItemsInYoutubePlaylist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all sync objects by the user's movesong email
         * @param {GetSyncsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncsByMovesongEmail(body?: GetSyncsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSyncsByMovesongEmailResp>> {
            return TransformApiFp(configuration).getSyncsByMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all transformations by the destination playlist id
         * @param {GetTransformsByDestinationPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByDestinationPlaylistId(body?: GetTransformsByDestinationPlaylistIdReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetTransformsByDestinationPlaylistIdResp>> {
            return TransformApiFp(configuration).getTransformsByDestinationPlaylistId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all transformations by the movesong email
         * @param {GetTransformsByMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByMovesongEmail(body?: GetTransformsByMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetTransformsByMovesongEmailResp>> {
            return TransformApiFp(configuration).getTransformsByMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all transformations by the origin playlist id
         * @param {GetTransformsByOriginPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByOriginPlaylistId(body?: GetTransformsByOriginPlaylistIdReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetTransformsByOriginPlaylistIdResp>> {
            return TransformApiFp(configuration).getTransformsByOriginPlaylistId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all transformations by the origin and destination playlist id
         * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByOriginPlaylistIdAndDestinationPlaylistId(body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdResp>> {
            return TransformApiFp(configuration).getTransformsByOriginPlaylistIdAndDestinationPlaylistId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all transformations by the origin and destination playlist id and movesong email
         * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail(body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq>> {
            return TransformApiFp(configuration).getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a playlist of the user's spotify account by playlist id
         * @param {GetUserSpotifyPlaylistByPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSpotifyPlaylistByPlaylistId(body?: GetUserSpotifyPlaylistByPlaylistIdReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserSpotifyPlaylistByPlaylistIdResp>> {
            return TransformApiFp(configuration).getUserSpotifyPlaylistByPlaylistId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all playlists of the user's spotify account
         * @param {GetUserSpotifyPlaylistsReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSpotifyPlaylists(body?: GetUserSpotifyPlaylistsReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserSpotifyPlaylistsResp>> {
            return TransformApiFp(configuration).getUserSpotifyPlaylists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a playlist of the user's youtube account by playlist id
         * @param {GetUserYoutubePlaylistByPlaylistIdReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserYoutubePlaylistByPlaylistId(body?: GetUserYoutubePlaylistByPlaylistIdReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserYoutubePlaylistByPlaylistIdResp>> {
            return TransformApiFp(configuration).getUserYoutubePlaylistByPlaylistId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all playlists of the user's youtube account
         * @param {GetUserYoutubePlaylistsReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserYoutubePlaylists(body?: GetUserYoutubePlaylistsReq, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserYoutubePlaylistsResp>> {
            return TransformApiFp(configuration).getUserYoutubePlaylists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing sync object
         * @param {UpdateSyncReq} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSync(body?: UpdateSyncReq, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateSyncResp>> {
            return TransformApiFp(configuration).updateSync(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransformApi - object-oriented interface
 * @export
 * @class TransformApi
 * @extends {BaseAPI}
 */
export class TransformApi extends BaseAPI {
    /**
     * 
     * @summary Connect the user's spotify account
     * @param {ConnectSpotifyAccountReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async connectSpotifyAccount(body?: ConnectSpotifyAccountReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<ConnectSpotifyAccountResp>> {
        return TransformApiFp(this.configuration).connectSpotifyAccount(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Connect the user's youtube account
     * @param {ConnectYoutubeAccountReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async connectYoutubeAccount(body?: ConnectYoutubeAccountReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<ConnectYoutubeAccountResp>> {
        return TransformApiFp(this.configuration).connectYoutubeAccount(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Convert a youtube playlist to a spotify playlist
     * @param {ConvertToSpotifyReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async convertToSpotify(body?: ConvertToSpotifyReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<ConvertToSpotifyResp>> {
        return TransformApiFp(this.configuration).convertToSpotify(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Convert a spotify playlist to a youtube playlist
     * @param {ConvertToYoutubeReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async convertToYoutube(body?: ConvertToYoutubeReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<ConvertToYoutubeResp>> {
        return TransformApiFp(this.configuration).convertToYoutube(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a new sync object
     * @param {CreateSyncReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async createSync(body?: CreateSyncReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateSyncResp>> {
        return TransformApiFp(this.configuration).createSync(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete all connections by the user's movesong email
     * @param {DeleteConnectionsByMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async deleteConnectionsByMovesongEmail(body?: DeleteConnectionsByMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteConnectionsByMovesongEmailResp>> {
        return TransformApiFp(this.configuration).deleteConnectionsByMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a sync object
     * @param {DeleteSyncReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async deleteSync(body?: DeleteSyncReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteSyncResp>> {
        return TransformApiFp(this.configuration).deleteSync(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete all sync objects by the user's movesong email
     * @param {DeleteSyncsByMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async deleteSyncsByMovesongEmail(body?: DeleteSyncsByMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteSyncsByMovesongEmailResp>> {
        return TransformApiFp(this.configuration).deleteSyncsByMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete all transformations by the user's movesong email
     * @param {DeleteTransformsByMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async deleteTransformsByMovesongEmail(body?: DeleteTransformsByMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteTransformsByMovesongEmailResp>> {
        return TransformApiFp(this.configuration).deleteTransformsByMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Export a spotify playlist to a CSV file
     * @param {ExportSpotifyPlaylistToFileReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async exportSpotifyPlaylistToCSV(body?: ExportSpotifyPlaylistToFileReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return TransformApiFp(this.configuration).exportSpotifyPlaylistToCSV(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Export a spotify playlist to a TXT file
     * @param {ExportSpotifyPlaylistToFileReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async exportSpotifyPlaylistToTXT(body?: ExportSpotifyPlaylistToFileReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return TransformApiFp(this.configuration).exportSpotifyPlaylistToTXT(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Export a youtube playlist to a CSV file
     * @param {ExportYoutubePlaylistToFileReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async exportYoutubePlaylistToCSV(body?: ExportYoutubePlaylistToFileReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return TransformApiFp(this.configuration).exportYoutubePlaylistToCSV(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Export a youtube playlist to a TXT file
     * @param {ExportYoutubePlaylistToFileReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async exportYoutubePlaylistToTXT(body?: ExportYoutubePlaylistToFileReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return TransformApiFp(this.configuration).exportYoutubePlaylistToTXT(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Find all connections by the user's movesong email
     * @param {FindConnectionsByMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async findConnectionsByMovesongEmail(body?: FindConnectionsByMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<FindConnectionsByMovesongEmailResp>> {
        return TransformApiFp(this.configuration).findConnectionsByMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all items in a spotify playlist
     * @param {GetItemsInSpotifyPlaylistReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getItemsInSpotifyPlaylist(body?: GetItemsInSpotifyPlaylistReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetItemsInSpotifyPlaylistResp>> {
        return TransformApiFp(this.configuration).getItemsInSpotifyPlaylist(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all items in a youtube playlist
     * @param {GetItemsInYoutubePlaylistReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getItemsInYoutubePlaylist(body?: GetItemsInYoutubePlaylistReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetItemsInYoutubePlaylistResp>> {
        return TransformApiFp(this.configuration).getItemsInYoutubePlaylist(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all sync objects by the user's movesong email
     * @param {GetSyncsByMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getSyncsByMovesongEmail(body?: GetSyncsByMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetSyncsByMovesongEmailResp>> {
        return TransformApiFp(this.configuration).getSyncsByMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all transformations by the destination playlist id
     * @param {GetTransformsByDestinationPlaylistIdReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getTransformsByDestinationPlaylistId(body?: GetTransformsByDestinationPlaylistIdReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetTransformsByDestinationPlaylistIdResp>> {
        return TransformApiFp(this.configuration).getTransformsByDestinationPlaylistId(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all transformations by the movesong email
     * @param {GetTransformsByMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getTransformsByMovesongEmail(body?: GetTransformsByMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetTransformsByMovesongEmailResp>> {
        return TransformApiFp(this.configuration).getTransformsByMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all transformations by the origin playlist id
     * @param {GetTransformsByOriginPlaylistIdReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getTransformsByOriginPlaylistId(body?: GetTransformsByOriginPlaylistIdReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetTransformsByOriginPlaylistIdResp>> {
        return TransformApiFp(this.configuration).getTransformsByOriginPlaylistId(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all transformations by the origin and destination playlist id
     * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getTransformsByOriginPlaylistIdAndDestinationPlaylistId(body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdResp>> {
        return TransformApiFp(this.configuration).getTransformsByOriginPlaylistIdAndDestinationPlaylistId(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all transformations by the origin and destination playlist id and movesong email
     * @param {GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail(body?: GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmailReq>> {
        return TransformApiFp(this.configuration).getTransformsByOriginPlaylistIdAndDestinationPlaylistIdAndMovesongEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a playlist of the user's spotify account by playlist id
     * @param {GetUserSpotifyPlaylistByPlaylistIdReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getUserSpotifyPlaylistByPlaylistId(body?: GetUserSpotifyPlaylistByPlaylistIdReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserSpotifyPlaylistByPlaylistIdResp>> {
        return TransformApiFp(this.configuration).getUserSpotifyPlaylistByPlaylistId(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all playlists of the user's spotify account
     * @param {GetUserSpotifyPlaylistsReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getUserSpotifyPlaylists(body?: GetUserSpotifyPlaylistsReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserSpotifyPlaylistsResp>> {
        return TransformApiFp(this.configuration).getUserSpotifyPlaylists(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a playlist of the user's youtube account by playlist id
     * @param {GetUserYoutubePlaylistByPlaylistIdReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getUserYoutubePlaylistByPlaylistId(body?: GetUserYoutubePlaylistByPlaylistIdReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserYoutubePlaylistByPlaylistIdResp>> {
        return TransformApiFp(this.configuration).getUserYoutubePlaylistByPlaylistId(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all playlists of the user's youtube account
     * @param {GetUserYoutubePlaylistsReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async getUserYoutubePlaylists(body?: GetUserYoutubePlaylistsReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserYoutubePlaylistsResp>> {
        return TransformApiFp(this.configuration).getUserYoutubePlaylists(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update an existing sync object
     * @param {UpdateSyncReq} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformApi
     */
    public async updateSync(body?: UpdateSyncReq, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateSyncResp>> {
        return TransformApiFp(this.configuration).updateSync(body, options).then((request) => request(this.axios, this.basePath));
    }
}
